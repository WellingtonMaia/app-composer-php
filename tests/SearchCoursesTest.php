<?php

use Alura\SearchCourses\Search;
use GuzzleHttp\ClientInterface;
use PHPUnit\Framework\TestCase;
use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\StreamInterface;
use Symfony\Component\DomCrawler\Crawler;

class SearchCoursesTest extends TestCase
{
    private $httpClientMock;
    private $url = 'url-test';

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $html = <<<FIM
            <html>
                <body>
                    <span class="card-curso__nome">Course Test 1</span>
                    <span class="card-curso__nome">Course Test 2</span>
                    <span class="card-curso__nome">Course Test 3</span>
                </body>           
            </html>
        FIM;

        $stream = $this->createMock(StreamInterface::class);

        $stream
            ->expects($this->once())
            ->method('__toString')
            ->willReturn($html);

        $response = $this->createMock(ResponseInterface::class);
        $response
            ->expects($this->once())
            ->method('getBody')
            ->willReturn($stream);

        $httpClient = $this->createMock(ClientInterface::class);
        $httpClient
            ->expects($this->once())
            ->method('request')
            ->with('GET', $this->url)
            ->willReturn($response);

        $this->httpClientMock = $httpClient;
    }

    public function test_it_must_get_courses_from_request()
    {
        $crawler = new Crawler();
        $search = new Search($this->httpClientMock, $crawler);
        $courses = $search->search($this->url);

        $this->assertCount(3 , $courses);
        $this->assertEquals('Course Test 1', $courses[0]);
        $this->assertEquals('Course Test 2', $courses[1]);
        $this->assertEquals('Course Test 3', $courses[2]);
    }
}